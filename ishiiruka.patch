diff --git a/Source/Core/Common/FileUtil.cpp b/Source/Core/Common/FileUtil.cpp
index 879040937..03afcb6ea 100644
--- a/Source/Core/Common/FileUtil.cpp
+++ b/Source/Core/Common/FileUtil.cpp
@@ -807,8 +807,12 @@ std::string GetSysDirectory()
 // On Linux platforms, the user.json file lives in the XDG_CONFIG_HOME/SlippiOnline
 // directory in order to deal with the fact that we want the configuration for AppImage
 // builds to be mutable.
-std::string GetSlippiUserJSONPath()
+std::string GetSlippiUserJSONPath(const SConfig& config)
 {
+	if (config.m_slippiForceCustomUserJson)
+	{
+		return config.m_strSlippiUserJsonPath;
+	}
 #if defined(__APPLE__)
 	std::string userFilePath = File::GetApplicationSupportDirectory() + "/Slippi/user.json";
 #else
diff --git a/Source/Core/Common/FileUtil.h b/Source/Core/Common/FileUtil.h
index 960753e25..339e26ec1 100644
--- a/Source/Core/Common/FileUtil.h
+++ b/Source/Core/Common/FileUtil.h
@@ -12,6 +12,7 @@
 
 #include "Common/CommonTypes.h"
 #include "Common/NonCopyable.h"
+#include "Core/ConfigManager.h"
 
 #ifdef _WIN32
 #include "Common/StringUtil.h"
@@ -152,7 +153,7 @@ void SetUserPath(unsigned int dir_index, const std::string& path);
 std::string GetThemeDir(const std::string& theme_name);
 
 // Gets the path where a Slippi user.json file lives.
-std::string GetSlippiUserJSONPath();
+std::string GetSlippiUserJSONPath(const SConfig& config);
 
 // Returns the path to where the sys file are
 std::string GetSysDirectory();
diff --git a/Source/Core/Core/ConfigManager.cpp b/Source/Core/Core/ConfigManager.cpp
index e6c01cf57..2965c5a12 100644
--- a/Source/Core/Core/ConfigManager.cpp
+++ b/Source/Core/Core/ConfigManager.cpp
@@ -290,6 +290,8 @@ void SConfig::SaveCoreSettings(IniFile &ini)
 	core->Set("SlippiLanIp", m_slippiLanIp);
 	core->Set("SlippiReplayMonthFolders", m_slippiReplayMonthFolders);
 	core->Set("SlippiReplayDir", m_strSlippiReplayDir);
+	core->Set("SlippiForceCustomUserJson", m_slippiForceCustomUserJson);
+	core->Set("SlippiUserJsonPath", m_strSlippiUserJsonPath);
 	core->Set("SlippiPlaybackDisplayFrameIndex", m_slippiEnableFrameIndex);
 	core->Set("BlockingPipes", m_blockingPipes);
 	core->Set("MemcardAPath", m_strMemoryCardA);
@@ -632,6 +634,15 @@ void SConfig::LoadCoreSettings(IniFile &ini)
 	core->Get("SlippiReplayMonthFolders", &m_slippiReplayMonthFolders, false);
 	std::string default_replay_dir = File::GetHomeDirectory() + DIR_SEP + "Slippi";
 	core->Get("SlippiReplayDir", &m_strSlippiReplayDir, default_replay_dir);
+	core->Get("SlippiForceCustomUserJson", &m_slippiForceCustomUserJson, false);
+// On Linux platforms, the user.json file lives in the XDG_CONFIG_HOME/SlippiOnline
+// directory in order to deal with the fact that we want the configuration for AppImage
+// builds to be mutable.
+#if defined(__APPLE__)
+	core->Get("SlippiUserJsonPath", &m_strSlippiUserJsonPath, File::GetApplicationSupportDirectory() + "/Slippi/user.json");
+#else
+    core->Get("SlippiUserJsonPath", &m_strSlippiUserJsonPath, File::GetUserPath(F_USERJSON_IDX));
+#endif
 	if (m_strSlippiReplayDir.empty())
 		m_strSlippiReplayDir = default_replay_dir;
 	core->Get("SlippiPlaybackDisplayFrameIndex", &m_slippiEnableFrameIndex, false);
diff --git a/Source/Core/Core/ConfigManager.h b/Source/Core/Core/ConfigManager.h
index 80a078972..6a6d9f18c 100644
--- a/Source/Core/Core/ConfigManager.h
+++ b/Source/Core/Core/ConfigManager.h
@@ -160,6 +160,8 @@ struct SConfig : NonCopyable
 	int m_slippiEnableQuickChat = SLIPPI_CHAT_ON;
 	bool m_slippiReplayMonthFolders = false;
 	std::string m_strSlippiReplayDir;
+	bool m_slippiForceCustomUserJson = false;
+	std::string m_strSlippiUserJsonPath;
 	bool m_slippiForceNetplayPort = false;
 	int m_slippiNetplayPort;
 	bool m_slippiForceLanIp = false;
diff --git a/Source/Core/Core/Slippi/SlippiMatchmaking.cpp b/Source/Core/Core/Slippi/SlippiMatchmaking.cpp
index 4728bb2e9..89df09742 100644
--- a/Source/Core/Core/Slippi/SlippiMatchmaking.cpp
+++ b/Source/Core/Core/Slippi/SlippiMatchmaking.cpp
@@ -250,7 +250,13 @@ void SlippiMatchmaking::startMatchmaking()
 	}
 
 	ENetAddress addr;
-	enet_address_set_host(&addr, MM_HOST.c_str());
+	std::string mm_host = SConfig::GetInstance().m_slippiForceCustomUserJson
+		? userInfo.matchmakingHost
+		: MM_HOST;
+
+	ERROR_LOG(SLIPPI_ONLINE, "[Matchmaking] Connecting to mm server: %s...", mm_host.c_str());
+
+	enet_address_set_host(&addr, mm_host.c_str());
 	addr.port = MM_PORT;
 
 	m_server = enet_host_connect(m_client, &addr, 3, 0);
diff --git a/Source/Core/Core/Slippi/SlippiUser.cpp b/Source/Core/Core/Slippi/SlippiUser.cpp
index c6e7da768..467ca1a5f 100644
--- a/Source/Core/Core/Slippi/SlippiUser.cpp
+++ b/Source/Core/Core/Slippi/SlippiUser.cpp
@@ -112,22 +112,24 @@ SlippiUser::~SlippiUser()
 
 bool SlippiUser::AttemptLogin()
 {
-	std::string userFilePath = File::GetSlippiUserJSONPath();
+	std::string userFilePath = File::GetSlippiUserJSONPath(SConfig::GetInstance());
 
+	if (!SConfig::GetInstance().m_slippiForceCustomUserJson) {
 // TODO: Remove a couple updates after ranked
 #ifndef __APPLE__
-	{
+		{
 #ifdef _WIN32
-		std::string oldUserFilePath = File::GetExeDirectory() + DIR_SEP + "user.json";
+			std::string oldUserFilePath = File::GetExeDirectory() + DIR_SEP + "user.json";
 #else
-		std::string oldUserFilePath = File::GetUserPath(D_USER_IDX) + DIR_SEP + "user.json";
+			std::string oldUserFilePath = File::GetUserPath(D_USER_IDX) + DIR_SEP + "user.json";
 #endif
-		if (File::Exists(oldUserFilePath) && !File::Rename(oldUserFilePath, userFilePath))
-		{
-			WARN_LOG(SLIPPI_ONLINE, "Could not move file %s to %s", oldUserFilePath.c_str(), userFilePath.c_str());
+			if (File::Exists(oldUserFilePath) && !File::Rename(oldUserFilePath, userFilePath))
+			{
+				WARN_LOG(SLIPPI_ONLINE, "Could not move file %s to %s", oldUserFilePath.c_str(), userFilePath.c_str());
+			}
 		}
-	}
 #endif
+	}
 
 	// Get user file
 	std::string userFileContents;
@@ -158,7 +160,7 @@ void SlippiUser::OpenLogInPage()
 	cframe->OpenSlippiAuthenticationDialog();
 #else
 	std::string url = "https://slippi.gg/online/enable";
-	std::string path = File::GetSlippiUserJSONPath();
+	std::string path = File::GetSlippiUserJSONPath(SConfig::GetInstance());
 
 #ifdef _WIN32
 	// On windows, sometimes the path can have backslashes and slashes mixed, convert all to backslashes
@@ -274,13 +276,15 @@ SlippiUser::UserInfo SlippiUser::parseFile(std::string fileContents)
 	info.playKey = readString(res, "playKey");
 	info.connectCode = readString(res, "connectCode");
 	info.latestVersion = readString(res, "latestVersion");
+	info.matchmakingHost = readString(res, "matchmakingHost");
+	info.userDiscoveryUrl = readString(res, "userDiscoveryUrl");
 
 	return info;
 }
 
 void SlippiUser::deleteFile()
 {
-	std::string userFilePath = File::GetSlippiUserJSONPath();
+	std::string userFilePath = File::GetSlippiUserJSONPath(SConfig::GetInstance());
 	File::Delete(userFilePath);
 }
 
@@ -290,8 +294,13 @@ void SlippiUser::overwriteFromServer()
 		return;
 
 	// Generate URL. If this is a beta version, use the beta endpoint
-	std::string url = URL_START;
-	if (scm_slippi_semver_str.find("beta") != std::string::npos)
+	std::string url = SConfig::GetInstance().m_slippiForceCustomUserJson
+		? userInfo.userDiscoveryUrl
+		: URL_START;
+	if (
+		url == URL_START &&
+		scm_slippi_semver_str.find("beta") != std::string::npos
+	)
 	{
 		url = url + "-beta";
 	}
diff --git a/Source/Core/Core/Slippi/SlippiUser.h b/Source/Core/Core/Slippi/SlippiUser.h
index b35411add..09cba084e 100644
--- a/Source/Core/Core/Slippi/SlippiUser.h
+++ b/Source/Core/Core/Slippi/SlippiUser.h
@@ -18,6 +18,8 @@ class SlippiUser
 		std::string displayName = "";
 		std::string connectCode = "";
 		std::string latestVersion = "";
+		std::string matchmakingHost = "";
+		std::string userDiscoveryUrl = "";
 		std::string fileContents = "";
 
 		int port;
diff --git a/Source/Core/DolphinWX/Config/SlippiConfigPane.cpp b/Source/Core/DolphinWX/Config/SlippiConfigPane.cpp
index b6136ce15..a60c9010c 100644
--- a/Source/Core/DolphinWX/Config/SlippiConfigPane.cpp
+++ b/Source/Core/DolphinWX/Config/SlippiConfigPane.cpp
@@ -91,6 +91,14 @@ void SlippiNetplayConfigPane::InitializeGUI()
 	ipTextValidator.SetIncludes(charsToFilter);
 	m_slippi_netplay_lan_ip_ctrl->SetValidator(ipTextValidator);
 
+	m_slippi_force_custom_user_json_checkbox = new wxCheckBox(this, wxID_ANY, _("Use custom user.json file"));
+	m_slippi_force_custom_user_json_checkbox->SetToolTip(
+		_("Enable this to use a different user.json file.")
+	);
+	m_slippi_user_json_file_txt = new wxStaticText(this, wxID_ANY, _("user.json file path:"));
+	m_slippi_user_json_file_picker = new wxFilePickerCtrl(this, wxID_ANY, wxEmptyString, _("user.json file path:"), wxEmptyString,
+							wxDefaultPosition, wxDefaultSize, wxFLP_USE_TEXTCTRL | wxFLP_SMALL);
+
 	// Input settings
 	m_reduce_timing_dispersion_checkbox = new wxCheckBox(this, wxID_ANY, _("Reduce Timing Dispersion"));
 	m_reduce_timing_dispersion_checkbox->SetToolTip(
@@ -132,6 +140,13 @@ void SlippiNetplayConfigPane::InitializeGUI()
 	sSlippiOnlineSettings->Add(m_slippi_netplay_lan_ip_ctrl, wxGBPosition(3, 1), wxDefaultSpan,
 	                           wxALIGN_LEFT | wxRESERVE_SPACE_EVEN_IF_HIDDEN);
 
+	sSlippiOnlineSettings->Add(m_slippi_force_custom_user_json_checkbox, wxGBPosition(4, 0), wxDefaultSpan,
+							   wxALIGN_CENTER_VERTICAL);
+	sSlippiOnlineSettings->Add(m_slippi_user_json_file_txt, wxGBPosition(5, 0), wxDefaultSpan,
+							   wxALIGN_CENTER_VERTICAL | wxRESERVE_SPACE_EVEN_IF_HIDDEN);
+	sSlippiOnlineSettings->Add(m_slippi_user_json_file_picker, wxGBPosition(5, 1), wxDefaultSpan,
+							   wxEXPAND | wxRESERVE_SPACE_EVEN_IF_HIDDEN);
+
 	wxStaticBoxSizer *const sbSlippiOnlineSettings =
 	    new wxStaticBoxSizer(wxVERTICAL, this, _("Slippi Online Settings"));
 	sbSlippiOnlineSettings->AddSpacer(space5);
@@ -166,6 +181,7 @@ void SlippiNetplayConfigPane::LoadGUIValues()
 	bool enableReplays = startup_params.m_slippiSaveReplays;
 	bool forceNetplayPort = startup_params.m_slippiForceNetplayPort;
 	bool forceLanIp = startup_params.m_slippiForceLanIp;
+	bool forceCustomUserJson = startup_params.m_slippiForceCustomUserJson;
 
 	m_replay_enable_checkbox->SetValue(enableReplays);
 	m_replay_month_folders_checkbox->SetValue(startup_params.m_slippiReplayMonthFolders);
@@ -193,6 +209,14 @@ void SlippiNetplayConfigPane::LoadGUIValues()
 		m_slippi_netplay_lan_ip_ctrl->Hide();
 	}
 
+	m_slippi_force_custom_user_json_checkbox->SetValue(startup_params.m_slippiForceCustomUserJson);
+	m_slippi_user_json_file_picker->SetPath(StrToWxStr(startup_params.m_strSlippiUserJsonPath));
+
+	if (!forceCustomUserJson) {
+		m_slippi_user_json_file_txt->Hide();
+		m_slippi_user_json_file_picker->Hide();
+	}
+
 	m_reduce_timing_dispersion_checkbox->SetValue(startup_params.bReduceTimingDispersion);
 }
 
@@ -214,6 +238,9 @@ void SlippiNetplayConfigPane::BindEvents()
 	                                             this);
 	m_slippi_netplay_lan_ip_ctrl->Bind(wxEVT_TEXT, &SlippiNetplayConfigPane::OnNetplayLanIpChanged, this);
 
+	m_slippi_force_custom_user_json_checkbox->Bind(wxEVT_CHECKBOX, &SlippiNetplayConfigPane::OnForceCustomUserJsonChanged, this);
+	m_slippi_user_json_file_picker->Bind(wxEVT_FILEPICKER_CHANGED, &SlippiNetplayConfigPane::OnUserJsonFileChanged, this);
+
 	m_reduce_timing_dispersion_checkbox->Bind(wxEVT_CHECKBOX, &SlippiNetplayConfigPane::OnReduceTimingDispersionToggle,
 	                                          this);
 }
@@ -295,6 +322,29 @@ void SlippiNetplayConfigPane::OnNetplayLanIpChanged(wxCommandEvent &event)
 	SConfig::GetInstance().m_slippiLanIp = m_slippi_netplay_lan_ip_ctrl->GetValue().c_str();
 }
 
+void SlippiNetplayConfigPane::OnForceCustomUserJsonChanged(wxCommandEvent &event)
+{
+	bool enableForceCustomUserJson = m_slippi_force_custom_user_json_checkbox->IsChecked();
+
+	SConfig::GetInstance().m_slippiForceCustomUserJson = enableForceCustomUserJson;
+
+	if (enableForceCustomUserJson)
+	{
+		m_slippi_user_json_file_txt->Show();
+		m_slippi_user_json_file_picker->Show();
+	}
+	else
+	{
+		m_slippi_user_json_file_txt->Hide();
+		m_slippi_user_json_file_picker->Hide();
+	}
+}
+
+void SlippiNetplayConfigPane::OnUserJsonFileChanged(wxCommandEvent &event)
+{
+	SConfig::GetInstance().m_strSlippiUserJsonPath = WxStrToStr(m_slippi_user_json_file_picker->GetPath());
+}
+
 void SlippiNetplayConfigPane::OnReduceTimingDispersionToggle(wxCommandEvent &event)
 {
 	SConfig::GetInstance().bReduceTimingDispersion = m_reduce_timing_dispersion_checkbox->GetValue();
diff --git a/Source/Core/DolphinWX/Config/SlippiConfigPane.h b/Source/Core/DolphinWX/Config/SlippiConfigPane.h
index 3d4d46331..9a1eed6eb 100644
--- a/Source/Core/DolphinWX/Config/SlippiConfigPane.h
+++ b/Source/Core/DolphinWX/Config/SlippiConfigPane.h
@@ -14,6 +14,7 @@ class wxButton;
 class wxCheckBox;
 class wxChoice;
 class wxDirPickerCtrl;
+class wxFilePickerCtrl;
 class wxSpinCtrl;
 class wxString;
 class wxStaticText;
@@ -37,6 +38,8 @@ class SlippiNetplayConfigPane final : public wxPanel
 	void OnNetplayPortChanged(wxCommandEvent &event);
 	void OnForceNetplayLanIpToggle(wxCommandEvent &event);
 	void OnNetplayLanIpChanged(wxCommandEvent &event);
+	void OnForceCustomUserJsonChanged(wxCommandEvent &event);
+	void OnUserJsonFileChanged(wxCommandEvent &event);
 	void OnQuickChatChanged(wxCommandEvent &event);
 	void OnReduceTimingDispersionToggle(wxCommandEvent &event);
 	void PopulateEnableChatChoiceBox();
@@ -52,6 +55,9 @@ class SlippiNetplayConfigPane final : public wxPanel
 	wxSpinCtrl *m_slippi_force_netplay_port_ctrl;
 	wxCheckBox *m_slippi_force_netplay_lan_ip_checkbox;
 	wxTextCtrl *m_slippi_netplay_lan_ip_ctrl;
+	wxCheckBox *m_slippi_force_custom_user_json_checkbox;
+	wxStaticText *m_slippi_user_json_file_txt;
+	wxFilePickerCtrl *m_slippi_user_json_file_picker;
 	wxStaticText *m_slippi_enable_quick_chat_txt;
 	wxChoice *m_slippi_enable_quick_chat_choice;
 
diff --git a/Source/Core/DolphinWX/SlippiAuthWebView/SlippiAuthWebView.cpp b/Source/Core/DolphinWX/SlippiAuthWebView/SlippiAuthWebView.cpp
index 4be3ba20f..3638ee054 100644
--- a/Source/Core/DolphinWX/SlippiAuthWebView/SlippiAuthWebView.cpp
+++ b/Source/Core/DolphinWX/SlippiAuthWebView/SlippiAuthWebView.cpp
@@ -124,7 +124,7 @@ void SlippiAuthWebView::OnTitleChanged(wxWebViewEvent& evt)
 	}
 
     // Now we can write it and do some cleanup
-	std::string userFilePath = File::GetSlippiUserJSONPath();
+	std::string userFilePath = File::GetSlippiUserJSONPath(SConfig::GetInstance());
     File::WriteStringToFile(user, userFilePath);
 
     // At this point, the background thread in SlippiUser will pick it up and the game should be 
